#pragma once

#pragma comment(linker, "/export:_BinkBufferBlit@12=binkw32_original._BinkBufferBlit@12")
#pragma comment(linker, "/export:_BinkBufferCheckWinPos@12=binkw32_original._BinkBufferCheckWinPos@12")
#pragma comment(linker, "/export:_BinkBufferClear@8=binkw32_original._BinkBufferClear@8")
#pragma comment(linker, "/export:_BinkBufferClose@4=binkw32_original._BinkBufferClose@4")
#pragma comment(linker, "/export:_BinkBufferGetDescription@4=binkw32_original._BinkBufferGetDescription@4")
#pragma comment(linker, "/export:_BinkBufferGetError@0=binkw32_original._BinkBufferGetError@0")
#pragma comment(linker, "/export:_BinkBufferLock@4=binkw32_original._BinkBufferLock@4")
#pragma comment(linker, "/export:_BinkBufferOpen@16=binkw32_original._BinkBufferOpen@16")
#pragma comment(linker, "/export:_BinkBufferSetDirectDraw@8=binkw32_original._BinkBufferSetDirectDraw@8")
#pragma comment(linker, "/export:_BinkBufferSetHWND@8=binkw32_original._BinkBufferSetHWND@8")
#pragma comment(linker, "/export:_BinkBufferSetOffset@12=binkw32_original._BinkBufferSetOffset@12")
#pragma comment(linker, "/export:_BinkBufferSetResolution@12=binkw32_original._BinkBufferSetResolution@12")
#pragma comment(linker, "/export:_BinkBufferSetScale@12=binkw32_original._BinkBufferSetScale@12")
#pragma comment(linker, "/export:_BinkBufferUnlock@4=binkw32_original._BinkBufferUnlock@4")
#pragma comment(linker, "/export:_BinkCheckCursor@20=binkw32_original._BinkCheckCursor@20")
#pragma comment(linker, "/export:_BinkClose@4=binkw32_original._BinkClose@4")
#pragma comment(linker, "/export:_BinkCloseTrack@4=binkw32_original._BinkCloseTrack@4")
#pragma comment(linker, "/export:_BinkControlBackgroundIO@8=binkw32_original._BinkControlBackgroundIO@8")
#pragma comment(linker, "/export:_BinkControlPlatformFeatures@8=binkw32_original._BinkControlPlatformFeatures@8")
#pragma comment(linker, "/export:_BinkCopyToBuffer@28=binkw32_original._BinkCopyToBuffer@28")
#pragma comment(linker, "/export:_BinkCopyToBufferRect@44=binkw32_original._BinkCopyToBufferRect@44")
#pragma comment(linker, "/export:_BinkDDSurfaceType@4=binkw32_original._BinkDDSurfaceType@4")
#pragma comment(linker, "/export:_BinkDX8SurfaceType@4=binkw32_original._BinkDX8SurfaceType@4")
#pragma comment(linker, "/export:_BinkDX9SurfaceType@4=binkw32_original._BinkDX9SurfaceType@4")
#pragma comment(linker, "/export:_BinkDoFrame@4=binkw32_original._BinkDoFrame@4")
#pragma comment(linker, "/export:_BinkGetError@0=binkw32_original._BinkGetError@0")
#pragma comment(linker, "/export:_BinkGetFrameBuffersInfo@8=binkw32_original._BinkGetFrameBuffersInfo@8")
#pragma comment(linker, "/export:_BinkGetKeyFrame@12=binkw32_original._BinkGetKeyFrame@12")
#pragma comment(linker, "/export:_BinkGetPalette@4=binkw32_original._BinkGetPalette@4")
#pragma comment(linker, "/export:_BinkGetRealtime@12=binkw32_original._BinkGetRealtime@12")
#pragma comment(linker, "/export:_BinkGetRects@8=binkw32_original._BinkGetRects@8")
#pragma comment(linker, "/export:_BinkGetSummary@8=binkw32_original._BinkGetSummary@8")
#pragma comment(linker, "/export:_BinkGetTrackData@8=binkw32_original._BinkGetTrackData@8")
#pragma comment(linker, "/export:_BinkGetTrackID@8=binkw32_original._BinkGetTrackID@8")
#pragma comment(linker, "/export:_BinkGetTrackMaxSize@8=binkw32_original._BinkGetTrackMaxSize@8")
#pragma comment(linker, "/export:_BinkGetTrackType@8=binkw32_original._BinkGetTrackType@8")
#pragma comment(linker, "/export:_BinkGoto@12=binkw32_original._BinkGoto@12")
#pragma comment(linker, "/export:_BinkIsSoftwareCursor@8=binkw32_original._BinkIsSoftwareCursor@8")
#pragma comment(linker, "/export:_BinkLogoAddress@0=binkw32_original._BinkLogoAddress@0")
#pragma comment(linker, "/export:_BinkNextFrame@4=binkw32_original._BinkNextFrame@4")
#pragma comment(linker, "/export:_BinkOpen@8=binkw32_original._BinkOpen@8")
#pragma comment(linker, "/export:_BinkOpenDirectSound@4=binkw32_original._BinkOpenDirectSound@4")
#pragma comment(linker, "/export:_BinkOpenMiles@4=binkw32_original._BinkOpenMiles@4")
#pragma comment(linker, "/export:_BinkOpenTrack@8=binkw32_original._BinkOpenTrack@8")
#pragma comment(linker, "/export:_BinkOpenWaveOut@4=binkw32_original._BinkOpenWaveOut@4")
#pragma comment(linker, "/export:_BinkPause@8=binkw32_original._BinkPause@8")
#pragma comment(linker, "/export:_BinkRegisterFrameBuffers@8=binkw32_original._BinkRegisterFrameBuffers@8")
#pragma comment(linker, "/export:_BinkRestoreCursor@4=binkw32_original._BinkRestoreCursor@4")
#pragma comment(linker, "/export:_BinkService@4=binkw32_original._BinkService@4")
#pragma comment(linker, "/export:_BinkSetError@4=binkw32_original._BinkSetError@4")
#pragma comment(linker, "/export:_BinkSetFrameRate@8=binkw32_original._BinkSetFrameRate@8")
#pragma comment(linker, "/export:_BinkSetIO@4=binkw32_original._BinkSetIO@4")
#pragma comment(linker, "/export:_BinkSetIOSize@4=binkw32_original._BinkSetIOSize@4")
#pragma comment(linker, "/export:_BinkSetMemory@8=binkw32_original._BinkSetMemory@8")
#pragma comment(linker, "/export:_BinkSetMixBinVolumes@20=binkw32_original._BinkSetMixBinVolumes@20")
#pragma comment(linker, "/export:_BinkSetMixBins@16=binkw32_original._BinkSetMixBins@16")
#pragma comment(linker, "/export:_BinkSetPan@12=binkw32_original._BinkSetPan@12")
#pragma comment(linker, "/export:_BinkSetSimulate@4=binkw32_original._BinkSetSimulate@4")
#pragma comment(linker, "/export:_BinkSetSoundOnOff@8=binkw32_original._BinkSetSoundOnOff@8")
#pragma comment(linker, "/export:_BinkSetSoundSystem@8=binkw32_original._BinkSetSoundSystem@8")
#pragma comment(linker, "/export:_BinkSetSoundTrack@8=binkw32_original._BinkSetSoundTrack@8")
#pragma comment(linker, "/export:_BinkSetVideoOnOff@8=binkw32_original._BinkSetVideoOnOff@8")
#pragma comment(linker, "/export:_BinkSetVolume@12=binkw32_original._BinkSetVolume@12")
#pragma comment(linker, "/export:_BinkShouldSkip@4=binkw32_original._BinkShouldSkip@4")
#pragma comment(linker, "/export:_BinkWait@4=binkw32_original._BinkWait@4")
#pragma comment(linker, "/export:_RADTimerRead@0=binkw32_original._RADTimerRead@0")

#define WIN32_LEAN_AND_MEAN
#include <Windows.h>


extern FILE* gp_fileHandle;

#define LOG_INFO(format, ...)           ::wprintf(L"[INFO] " format L"\n", __VA_ARGS__)
#define LOG_ERROR(format, ...)          do { ::wprintf(L"[ERROR] " format L"\n", __VA_ARGS__); ::fflush(stdout); } while (false)

#define FILE_WRITE(format, ...)         do { if (gp_fileHandle != nullptr) { ::fwprintf(gp_fileHandle, format L"\n", __VA_ARGS__); } } while (false)
#define FILE_FLUSH()                    do { if (gp_fileHandle != nullptr) { ::fflush(gp_fileHandle); } } while (false)
